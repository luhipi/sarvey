name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  release:
    types: 
      - published

permissions:
  contents: write

env:
    SKIP_DEPLOY: false
    SKIP_INSTALL: true
    SKIP_TEST: false

jobs:
  before_script:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [ 20.x ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          source /opt/conda/etc/profile.d/conda.sh
          conda init bash
          source ~/.bashrc
          conda env remove --prefix /home/runneruser/.conda/envs/ci_temp_env --yes || rm -rf /home/runneruser/.conda/envs/ci_temp_env
          conda create --prefix /home/runneruser/.conda/envs/ci_temp_env --clone ci_env
          conda activate ci_temp_env
        shell: bash

  test_sarvey:
    runs-on: self-hosted
    needs: before_script
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Run tests
        if: env.SKIP_TEST == 'false'
        run: |
          source /opt/conda/etc/profile.d/conda.sh
          conda init bash
          source ~/.bashrc
          conda activate ci_temp_env
          rm -rf tests/testdata
          # wget -nv -c -O testdata.zip https://seafile.projekt.uni-hannover.de/f/4b3be399dffa488e98db/?dl=1
          wget -nv -c -O testdata.zip https://seafile.projekt.uni-hannover.de/f/104b499f6f7e4360877d/?dl=1          
          unzip testdata.zip
          mv testdata tests/
          mamba list
          make pytest
        shell: bash

      # BUILD DOCUSAURUS DOCS
      - name: Set up Node
        if: env.SKIP_DEPLOY == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Node dependencies
        if: env.SKIP_DEPLOY == 'false'
        run: |
          # If your Docusaurus project is in the root, this installs from package.json
          npm ci
        shell: bash

      - name: Update README badges & run Docusaurus versioning (tag only)
        if: env.SKIP_DEPLOY == 'false'
        run: |
          source /opt/conda/etc/profile.d/conda.sh
          conda init bash
          source ~/.bashrc
          conda activate ci_temp_env
          
          IFS='/' read -r OWNER REPO <<< "${GITHUB_REPOSITORY}"
          URL_IO="https://${OWNER}.github.io/${REPO}"
          URL="https://github.com/${OWNER}/${REPO}"
          echo "Repository URL: $URL"
          echo "Repository Documentation URL: $URL_IO"

          # Update the badge in README.rst
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              TAG_NAME=${GITHUB_REF##*/}
              BADGE_URL="${URL}/actions/workflows/ci.yml/badge.svg?branch=$TAG_NAME"
            else
              BADGE_URL="${URL}/actions/workflows/ci.yml/badge.svg?branch=main"
          fi

          echo "Badge URL: $BADGE_URL"
          BADGE_DEFAULT_URL="${URL}/actions/workflows/ci.yml/badge.svg"
          sed -i "s|${BADGE_DEFAULT_URL}|$BADGE_URL|g" README.rst

          # If pushing a tag like v1.2.3, create a new Docusaurus doc version
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
              TAG_NAME=${GITHUB_REF##*/}
              echo "Docusaurus docs:version => $TAG_NAME"
              npx docusaurus docs:version "$TAG_NAME"
          fi

      - name: Build Docusaurus docs
        if: env.SKIP_DEPLOY == 'false' && github.event_name != 'pull_request'
        run: |
          # Produce the static site in the "build/" folder
          npm run build
        shell: bash

      # --------------------------------
      # UPLOAD ARTIFACTS
      # --------------------------------
      - name: Upload coverage report
        if: env.SKIP_DEPLOY == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Upload report.html
        if: env.SKIP_DEPLOY == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: report.html

      - name: Upload Docusaurus build
        if: env.SKIP_DEPLOY == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: docusaurus-build
          path: build/

      - name: Upload cobertura coverage report
        if: env.SKIP_DEPLOY == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: cobertura-coverage
          path: coverage.xml

      - name: Upload junit report
        if: env.SKIP_DEPLOY == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: report.xml

  test_styles:
    runs-on: self-hosted
    needs: test_sarvey
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        if: env.SKIP_TEST == 'false'
        run: |
          source /opt/conda/etc/profile.d/conda.sh
          conda init bash
          source ~/.bashrc
          conda activate ci_temp_env
          make lint
        shell: bash

      - name: Upload flake8 log
        if: env.SKIP_TEST == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: flake8-log
          path: tests/linting/flake8.log

      - name: Upload pycodestyle log
        if: env.SKIP_TEST == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: pycodestyle-log
          path: tests/linting/pycodestyle.log

      - name: Upload pydocstyle log
        if: env.SKIP_TEST == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: pydocstyle-log
          path: tests/linting/pydocstyle.log

  test_urls:
    runs-on: self-hosted
    needs: test_sarvey
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        if: env.SKIP_TEST == 'false'
        run: |
          source /opt/conda/etc/profile.d/conda.sh
          conda init bash
          source ~/.bashrc
          conda activate ci_temp_env
          make urlcheck
        shell: bash

  test_sarvey_install:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      -   name: Install dependencies
          if: env.SKIP_INSTALL == 'false'
          run: |
              source /opt/conda/etc/profile.d/conda.sh
              conda activate base
              mamba env remove --name sarvey_testinstall --yes || echo "Environment sarvey_testinstall does not exist"
              mamba clean --index-cache --tarballs --packages -y
              pip install conda-merge
              export PATH=$HOME/.local/bin:$PATH # workaround conda-merge not found!
              wget https://raw.githubusercontent.com/insarlab/MiaplPy/main/conda-env.yml
              conda-merge conda-env.yml tests/CI_docker/context/environment_sarvey.yml > env.yml
              mamba env create --name sarvey_testinstall -f env.yml
              conda activate sarvey_testinstall
              pip install git+https://github.com/insarlab/MiaplPy.git
              pip install .
              OUTPUT=$(pip check) || { echo "$OUTPUT"; true; }
              cd ..
              python -c "import sarvey; print(sarvey)"
          shell: bash

  deploy_pages:
    runs-on: self-hosted
    needs: 
      - test_sarvey
      - test_urls
      - test_styles
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Download Docusaurus build artifact
        uses: actions/download-artifact@v4
        with:
          name: docusaurus-build
          path: build

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Download test report
        uses: actions/download-artifact@v4
        with:
          name: test-report
          path: .

      # ---------------------------------
      # SSH Setup (if you want SSH-based deploy key)
      # ---------------------------------
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # ---------------------------------
      # Deploy to GitHub Pages using SSH
      # ---------------------------------
      - name: Deploy to GitHub Pages
        if: env.SKIP_DEPLOY == 'false' && github.event_name != 'pull_request'
        uses: peaceiris/actions-gh-pages@v4
        with:
          deploy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          publish_branch: gh-pages
          publish_dir: ./build
